skewed <- function(x_bar, p_50, s) 3*(x_bar-p_50)*s
print(skewed()(list(
x_bar=mean(xs),
p_50=quantile(xs, 0.50),
s=1
)))
print(skewed()(list(
x_bar=mean(xs),
p_50=quantile(xs, 0.50),
s=sd(xs)
)))
return(result)
skewness <- function(params) {
return(3 * (params$x_bar - params$p_50) / params$s)
}
print(skewed()(list(
x_bar = mean(xs),
p_50 = quantile(xs, 0.50),
s = sd(xs)
)))
result <- case_when(
I > 1 ~ "The data is significantly skewed",
I <= 1 ~ "The data is not significantly skewed"
)
xs<-rnorm(100)
library(dplyr)
skewness <- function(params) {
return(3 * (params$x_bar - params$p_50) / params$s)
}
skewed <- function() {
return (function(params) {
I <- skewness(params)
result <- case_when(
I > 1 ~ "The data is significantly skewed",
I <= 1 ~ "The data is not significantly skewed"
)
return(result)
})
}
xs<-rnorm(100)
print(skewed()(list(
x_bar = mean(xs),
p_50 = quantile(xs, 0.50),
s = sd(xs)
)))
skewed <- function() {
return (function(params) {
I <- skewness(params)
result <- ifelse(I > 1,
"The data is significantly skewed",
"The data is not significantly skewed"
)
return(result)
})
}
print(skewed()(list(
x_bar = mean(xs),
p_50 = quantile(xs, 0.50),
s = sd(xs)
)))
print(skewed()(list(
x_bar = mean(x),
p_50 = quantile(x, 0.50),
s = sd(x)
)))
x<-rnorm(100)
print(skewed()(list(
x_bar = mean(x),
p_50 = quantile(x, 0.50),
s = sd(x)
)))
y <- x^2
print(skewed()(list(
x_bar = mean(y),
p_50 = quantile(y, 0.50),
s = sd(y)
)))
# Load Ryacas for symbolic computation
library(Ryacas)
# Define the original linear function f(x) = a*x + b using expression
original_function <- function(x_val) {
eval(expression(a * x_val + b))
}
# Define the symbolic form of the linear function for solving
f <- expression(a * x + b)
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- yacas_solve(f == y, x)
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- Solve(f == y, x)
# Load Ryacas for symbolic computation
library(Ryacas)
# Extract the inverse expression as a character string
inverse_formula <- inv_expr[[1]]
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- Solve(f == y, x)
yacas_solve
View(skewed)
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- solve(f == y, x)
# Load Ryacas for symbolic computation
library(Ryacas)
# Define the original linear function f(x) = a*x + b using expression
original_function <- function(x_val) {
eval(expression(a * x_val + b))
}
# Define the symbolic form of the linear function for solving
f <- expression(a * x + b)
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- solve(f == y, x)
generate_functions <- function(a, b) {
# Define symbolic variables x and y
x <- Sym("x")
y <- Sym("y")
# Define the linear function symbolically: f(x) = a * x + b
f <- a * x + b
# Solve symbolically for the inverse: f(x) = y -> solve for x
inv_expr <- Solve(f == y, x)
# Extract the inverse expression as a character string
inverse_formula <- inv_expr[[1]]
# Define the original function as a regular R function
original_function <- function(x_val) {
return(a * x_val + b)
}
# Convert the inverse symbolic expression into an R function
inverse_function <- function(y_val) {
eval(parse(text = gsub("y", y_val, as.character(inverse_formula))))
}
# Return both the original and inverse functions as a list
return(list(original = original_function, inverse = inverse_function))
}
# Example usage
# Generate both the original and inverse functions for f(x) = 2*x + 3
functions <- generate_functions(2, 3)
# Load Ryacas for symbolic computation
library(Ryacas)
# Load Ryacas for symbolic computation
library(Ryacas)
y <- Sym("y")
# Define symbolic variables x and y
x <- Sym("x")
library(dplyr)
library(Ryacas)
library(Ryacas)
x <- Sym("x")
library(Ryacas)
x <- Sym('x')
x <- ysym('x')
y <- ysym("y")
f <- a * x + b
f <- expresion(a * x + b)
f <- expression(a * x + b)
inv_expr <- Solve(f == y, x)
inv_expr <- ysolve(f == y, x)
inv_expr <- ysolve(f == y, x)
inv_expr <- solve(f == y, x)
inv_expr <- solve(f)
inv_expr <- solve(a * x + b)
inv_expr <- solve(a * x + b)
functions <- generate_functions(5/9, (-32)*5/9)
y <- ysym("y")
# Define symbolic variables x and y using ysym
x <- ysym("x")
y <- ysym("y")
# Define the linear function symbolically: f(x) = a * x + b
f <- a * x + b
# Define the linear function symbolically: f(x) = a * x + b
f <- a * x + b
library(magrittr)
library(dplyr)
library(magrittr)
skewness <- function(x_bar, p_50, s) {
return(3 * (x_bar - p_50) / s)
}
skewed <- function(I) {
result <- ifelse(I > 1,
"The data is significantly skewed",
"The data is not significantly skewed"
)
return(result)
}
x<-rnorm(100)
y <- x^2
print(
skewness(x_bar = mean(x),
p_50 = quantile(x, 0.50),
s = sd(x)
)%>% skewed())
print(skewness(
x_bar = mean(y),
p_50 = quantile(y, 0.50),
s = sd(y)
)%>% skewed())
x<-rnorm(100)
y <- x^2
I_x <- skewness(mean(x), quantile(x, 0.50), sd(x)) %>% skewed()
print(I_x)
I_y<-skewness(mean(y), quantile(y, 0.50), sd(y)) %>% skewed()
print(I_y)
animals <- data.frame(
species = c("swift", "falcon", "goose", "starling", "cheetah", "horse", "hippo",
"man", "squirrel", "cat", "shark", "seahorse"),
speed = c(200.00, 70.00, 70.00, 50.00, 70.00, 50.00, 30.00,
25.00, 12.00, 35.00, 40.00, 0.02),
medium = factor(c("air", "air", "air", "air", "land", "land",
"land", "land", "land", "land", "water", "water")),
weight = c(0.02, 0.70, 2.20, 0.05, 50.00, 450.00, 2500.00,
80.00, 0.60, 4.00, 600.00, 0.10)
)
print(animals)
boxplot(animals$speed ~ animals$medium,
main = "Speed of Animals by Medium",
xlab = "Medium",
ylab = "Speed in km/h",
col = "lightgray",
border = "black"
)
aquatic<-animals[animals$medium=="water",]
print(aquatic)
print(table(animals$medium))
